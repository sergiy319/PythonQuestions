# Вопросы для Junior


"""
Общее с Computer Science и Web Development:

1. Что такое инженерия и процесс разработки в целом?

2. Какие принципы программирования существуют?

3. Чем отличаются процедурная и объектов-ориентированная
   парадигмы программирования?

4. Какие основные принципы ООП (подражание, инкапсуляция, полиморфизм)?

5. Что такое множественное наследование?

6. Какие есть шесть этапов разработки продукта
   в Software Development lifecycle и какая разница
   между Agile и Kanban?

7. Какие есть методы HTTP-запросов и какая между ними разница?

8. Как выглядят HTTP-request / response?
9. Что такое авторизация и как она работает?
10. Что такое cookies?
11. Что такое вебвразливисть?
12.Как знаете классические базы данных?
13.Какие читать спецификацию в конкретном языке (например, PEP8 в Python)?
14.Как происходит взаимодействие клиента и сервера?
15.Какие есть подходы к проектированию API?
16.Как использовать паттерны программирования?
17.Що такое Acceptance Testing и зачем его используют?
18.Що такое модульные и интеграционные тесты, API-тесты?
19.Як писать unit-тесты?
20.Как есть best practices в написании Автотест?
21.Яки базовые команды системы контроля версий?
22.Як использовать Git?
23. В чем разница между хешированием и шифрованием?

Python:
24.Python - интерпретируемый язык или компилируется?
25.Яки есть переменные и постоянные типы данных?
26.Що такое область видимости переменных?
27.Що такое introspection?
28.Ризниця между is и ==?
29.Ризниця между __init __ () и __new __ ()?
30.У чем разница между потоками и процессами?
31.Яки есть виды импорта?
32.Що такое класс, итератор, генератор?
33.Що такое метаклассы, переменная цикла?
34.У чем разница между итераторами и генераторами?
35. В этой чем разница между staticmethod и classmethod?
36.Як работают декораторы, контекстные менеджеры?
37.Як работают dict comprehension, list comprehension и set comprehension?
38.Чы можно использовать несколько декораторов для одной функции?
39.Чы можно создать декоратор из класса?
40.Яки основные популярные пакеты (requests, pytest, etc)?
41.Що такое lambda-функции?
42.Що означает * args, ** kwargs и как они используются?
43.Що такое exceptions, <try-except »?
44.Що такое PEP (Python Enhancement Proposal), из них знаете (PEP 8, PEP 484)?
45.Напишить hello-world сервис, используя один из фреймворков.
46.Яки есть типы данных и какая разница между list и tuple, зачем они?
47.Як использовать встроенные коллекции (list, set, dictionary)?
48.У чем заключается сложность доступа к элементам dict?
49.Як создается объект в Python, для чего __new__, зачем __init__?
50.Що знаете из модуля collections, которыми еще built-in модулями пользовались?
51.Що такое шаблонизатор и как в нем выполнять базовые операции (объединять участки шаблона, выводить дату, выводить данные с серверного стороны)?
52.Як Python работает с HTTP-сервером?
53.Що происходит, когда создается виртуальная среда?

Базы данных:
54.Яки есть базовые методы работы с SQL- базой данных в Python?
55.Що такое SQL-транзакция?
56.Як сделать выборку с SQL-базы с простой агрегацией?
57.Який выглядит запрос, который выполняет JOIN между таблицами и к самим себе?
58.Як отправлять запросы в SQL-базу данных без ORM?

алгоритмы:
59.Що такое алгоритмы (например, Big-O notation)?
60.Яки есть базовые алгоритмы сортировки?
61.Що такое Bubble Sort и как это работает?
62.Що такое линейная сложность сортировки?
"""
