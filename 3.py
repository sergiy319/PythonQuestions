# Чем отличаются процедурная и объектов-ориентированная
# парадигмы программирования?

"""
  * Процедурное программирование (POP) происходит от структурного
программирования, основанного на понятиях функций / процедур.
Легко получить доступ и изменить данные в процедурно-ориентированном
программировании. С другой стороны, объектно-ориентированное
программирование (OOP) позволяет разложить проблему на несколько единиц,
называемых объектами, а затем построить данные и функции вокруг этих объектов.
В нем больше внимания уделяется данным, чем процедуре или функциям.
Также в OOP данные скрыты и недоступны для внешних процедур.


1. Процедурно-ориентированное программирование:

  .1 В POP все внимание сосредоточено на данных и функциях.
  .2 Ограниченное повторное использование кода.
  .3 Нисходящий подход.
  .4 Ограниченные спецификаторы доступа.
  .5 Данные могут свободно перемещаться от функций к функциям в системе.
  .6 В POP большинство функций использует глобальные данные для
     совместного использования, к которым можно свободно обращаться
     от функции к функции в системе.
  .7 В POP используется не безопасный спрсоб скрыть данные.
  .8 Невозможна перегрузка операторов.
  .9 Пример-Языки: C, VB, Фортран, Паскаль.
  .10 Использует абстракцию на уровне процедуры.


2. Объектно-ориентированное программирование:

  .1 OOP основан на сценарии реального мира. Вся программа
     делится на небольшие части, называемые объектом.
  .2 Неограниченное повторное использование кода.
  .3 Подход основан на объектно-ориентированном дизайне.
  .4 Спецификаторы доступа: государственный, частный и охраняемый.
  .5 В OOP данные могут перемещаться и взаимодействовать
     друг с другом через функции-члены.
  .6 В OOP данные не могут свободно перемещаться от метода к методу,
     они могут храниться в публичном или частном порядке,
     чтобы мы могли контролировать доступ к данным.
  .7 Гораздо более безопасный способ сокрытия данных.
  .8 Возможна перегрузка функций и операторов.
  .9 Пример-Языки: C ++, Python, Java, C #.
  .10 Использует абстракцию на уровне класса и объекта.

"""
